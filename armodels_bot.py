import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from parsers.models_parser import ModelsParser
from parsers.teachers_parser import TeachersParser
from parsers.partners_parser import PartnersParser
from parsers.magazines_parser import MagazinesParser
from parsers.projects_parser import ProjectsParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ModelsTelegramBot:
    def __init__(self, token):
        self.application = Application.builder().token(token).build()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
        self.models_parser = ModelsParser()
        self.teachers_parser = TeachersParser()
        self.partners_parser = PartnersParser()
        self.magazines_parser = MagazinesParser()
        self.projects_parser = ProjectsParser()

        # –ö—ç—à–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.models_cache = []
        self.teachers_cache = []
        self.partners_cache = []
        self.magazines_cache = []
        self.projects_cache = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("models", self.models_command))
        self.application.add_handler(CommandHandler("teachers", self.teachers_command))
        self.application.add_handler(CommandHandler("partners", self.partners_command))
        self.application.add_handler(CommandHandler("magazines", self.magazines_command))
        self.application.add_handler(CommandHandler("projects", self.projects_command))
        self.application.add_handler(CallbackQueryHandler(self.model_detail, pattern='^model_'))
        self.application.add_handler(CallbackQueryHandler(self.teacher_detail, pattern='^teacher_'))
        self.application.add_handler(CallbackQueryHandler(self.partner_detail, pattern='^partner_'))
        self.application.add_handler(CallbackQueryHandler(self.project_detail, pattern='^project_'))
        self.application.add_handler(CallbackQueryHandler(self.project_category, pattern='^category_'))
        self.application.add_handler(CallbackQueryHandler(self.magazine_detail, pattern='^magazine_'))
        self.application.add_handler(CallbackQueryHandler(self.photo_navigation, pattern='^photo_(prev|next)_'))
        self.application.add_handler(CallbackQueryHandler(self.back_to_models, pattern='^back_to_models$'))
        self.application.add_handler(CallbackQueryHandler(self.back_to_teachers, pattern='^back_to_teachers$'))
        self.application.add_handler(CallbackQueryHandler(self.back_to_partners, pattern='^back_to_partners$'))
        self.application.add_handler(CallbackQueryHandler(self.back_to_magazines, pattern='^back_to_magazines$'))
        self.application.add_handler(CallbackQueryHandler(self.back_to_main, pattern='^back_to_main$'))
        self.application.add_handler(CallbackQueryHandler(self.back_to_projects, pattern='^back_to_projects$'))
        self.application.add_handler(CallbackQueryHandler(self.handle_pagination, pattern='^page_'))
        self.application.add_handler(CallbackQueryHandler(self.handle_filter, pattern='^filter_'))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
        welcome_text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–¥–µ–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ ARModels!\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /models ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
            "‚Ä¢ /teachers ‚Äî –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ /partners ‚Äî –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞\n"
            "‚Ä¢ /projects ‚Äî –ü—Ä–æ–µ–∫—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞\n"
            "‚Ä¢ /magazines ‚Äî –ê—Ä—Ö–∏–≤ –≤—ã–ø—É—Å–∫–æ–≤ –≥–ª—è–Ω—Ü–µ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å—è—Ç—Å—è —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ armodels.ru"
        )
        await update.message.reply_text(welcome_text, parse_mode='HTML')

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.user_data.pop('current_page', None)
        context.user_data.pop('current_filter', None)
        context.user_data.pop('current_model', None)

    async def models_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /models"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['command_message_id'] = update.message.message_id

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        context.user_data['current_page'] = 0
        context.user_data['current_filter'] = 'all'

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        await self.list_models(update, context, page=0, filter_type="all")

    async def teachers_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /teachers"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
        if hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
            context.user_data['command_message_id'] = update.message.message_id
        elif hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        else:
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not self.teachers_cache:
            teachers = self.teachers_parser.parse_list()
            self.teachers_cache = teachers
        else:
            teachers = self.teachers_cache

        if not teachers:
            keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=chat_id,
                text="üë®‚Äçüè´ <b>–†–∞–∑–¥–µ–ª —É—á–∏—Ç–µ–ª–µ–π</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∏—Ç–µ–ª–µ–π
        message = "üë®‚Äçüè´ <b>–ù–∞—à–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</b>\n\n"
        message += f"–ù–∞–π–¥–µ–Ω–æ {len(teachers)} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []

        for idx, teacher in enumerate(teachers):
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å—é
            button_text = f"üë®‚Äçüè´ {teacher['name']}"
            if teacher.get('specialty'):
                button_text += f" ({teacher['specialty']})"

            keyboard.append([InlineKeyboardButton(
                button_text,
                callback_data=f"teacher_{idx}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    async def partners_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /partners"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
        if hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
            context.user_data['command_message_id'] = update.message.message_id
        elif hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        else:
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not self.partners_cache:
            partners = self.partners_parser.parse_list()
            self.partners_cache = partners
        else:
            partners = self.partners_cache

        if not partners:
            keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=chat_id,
                text="ü§ù <b>–†–∞–∑–¥–µ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        message = "ü§ù <b>–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã</b>\n\n"
        message += f"–ù–∞–π–¥–µ–Ω–æ {len(partners)} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []

        for idx, partner in enumerate(partners):
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            button_text = f"ü§ù {partner['name']}"

            keyboard.append([InlineKeyboardButton(
                button_text,
                callback_data=f"partner_{idx}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    async def list_models(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0, filter_type: str = "all"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /models, –ø–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Ñ–∏–ª—å—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['current_page'] = page
            context.user_data['current_filter'] = filter_type

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if not self.models_cache:
                models = self.models_parser.parse_list()
                self.models_cache = models
            else:
                models = self.models_cache

            if not models:
                message = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                await self.send_message(update, message)
                return

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
            filtered_models = self.apply_filter(models, filter_type)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            models_per_page = 6
            total_pages = (len(filtered_models) + models_per_page - 1) // models_per_page
            start_idx = page * models_per_page
            end_idx = min(start_idx + models_per_page, len(filtered_models))
            current_models = filtered_models[start_idx:end_idx]

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            filter_name = self.get_filter_name(filter_type)
            message = f"üìã <b>–ú–æ–¥–µ–ª–∏ {filter_name}</b>\n\n"
            message += f"–ü–æ–∫–∞–∑–∞–Ω—ã –º–æ–¥–µ–ª–∏ {start_idx + 1}-{end_idx} –∏–∑ {len(filtered_models)}\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []

            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for idx, model in enumerate(current_models):
                actual_idx = models.index(model)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
                keyboard.append([InlineKeyboardButton(
                    f"üë§ {model['name']}",
                    callback_data=f"model_{actual_idx}"
                )])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            nav_row = []

            if page > 0:
                nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}_filter_{filter_type}"))

            nav_row.append(InlineKeyboardButton(f"{page + 1}/{total_pages}", callback_data="page_counter"))

            if page < total_pages - 1:
                nav_row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}_filter_{filter_type}"))

            if nav_row:
                keyboard.append(nav_row)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filter_row = []
            filters = [
                ("all", "–í—Å–µ"),
                ("male", "–Æ–Ω–æ—à–∏"),
                ("female", "–î–µ–≤—É—à–∫–∏"),
                ("first_course", "1 –∫—É—Ä—Å"),
                ("second_course", "2 –∫—É—Ä—Å"),
                ("third_course", "3 –∫—É—Ä—Å"),
                ("fourth_course", "4 –∫—É—Ä—Å")
            ]

            for filter_key, filter_label in filters:
                if filter_key != filter_type:
                    filter_row.append(InlineKeyboardButton(
                        filter_label,
                        callback_data=f"filter_{filter_key}_page_0"
                    ))

            if filter_row:
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
                for i in range(0, len(filter_row), 3):
                    keyboard.append(filter_row[i:i+3])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
            keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_message(update, message, reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            await self.send_message(update, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

    def apply_filter(self, models, filter_type):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π"""
        if filter_type == "all":
            return models
        elif filter_type in ["male", "female"]:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML
            return [model for model in models if model.get('gender') == filter_type]
        elif filter_type.endswith("_course"):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—É—Ä—Å—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML
            return [model for model in models if model.get('course_type') == filter_type]
        return models

    def get_filter_name(self, filter_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞"""
        filter_names = {
            "all": "(–≤—Å–µ –º–æ–¥–µ–ª–∏)",
            "male": "(—é–Ω–æ—à–∏)",
            "female": "(–¥–µ–≤—É—à–∫–∏)",
            "first_course": "(1 –∫—É—Ä—Å)",
            "second_course": "(2 –∫—É—Ä—Å)",
            "third_course": "(3 –∫—É—Ä—Å)",
            "fourth_course": "(4 –∫—É—Ä—Å)"
        }
        return filter_names.get(filter_type, "")

    async def send_message(self, update, text, reply_markup=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            # –ï—Å–ª–∏ update –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç message –∏–ª–∏ callback_query, –ø–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            chat_id = None
            if hasattr(update, 'effective_chat'):
                chat_id = update.effective_chat.id
            elif hasattr(update, 'callback_query') and update.callback_query:
                chat_id = update.callback_query.message.chat_id

            if chat_id:
                from telegram.ext import ContextTypes
                # –ü–æ–ª—É—á–∞–µ–º context –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å context –≤ –≤—ã–∑–æ–≤—ã)
                # –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                pass

    async def delete_previous_message(self, context):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å"""
        last_message_id = context.user_data.get('last_message_id')
        if last_message_id:
            try:
                await context.bot.delete_message(
                    chat_id=context.user_data.get('chat_id'),
                    message_id=last_message_id
                )
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {last_message_id}: {e}")
            finally:
                # –û—á–∏—â–∞–µ–º ID –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                context.user_data.pop('last_message_id', None)

    async def model_detail(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–æ–¥–µ–ª–∏, –ø–∞—Ä—Å–∏—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏."""
        query = update.callback_query
        await query.answer()

        model_idx = int(query.data.replace('model_', ''))

        if model_idx < 0 or model_idx >= len(self.models_cache):
            await query.edit_message_text(text='–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return

        model_url = self.models_cache[model_idx]['url']

        try:
            model_info = self.models_parser.parse_detail(model_url)

            if not model_info:
                await query.edit_message_text(text='–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏.')
                return

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ–ª–µ–π
            await query.delete_message()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ
            # (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Å—Ç–∞—é—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏)
            context.user_data['current_model'] = model_info
            context.user_data['current_photo_idx'] = 0
            context.user_data['message_id'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            await self.show_photo_with_navigation(query, context, model_info, 0)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª–∏: {e}")
            await query.edit_message_text(text='–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏.')

    async def teacher_detail(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∏—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()

        teacher_idx = int(query.data.replace('teacher_', ''))

        if teacher_idx < 0 or teacher_idx >= len(self.teachers_cache):
            await query.edit_message_text(text='–û—à–∏–±–∫–∞: —É—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        teacher = self.teachers_cache[teacher_idx]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∏—Ç–µ–ª–µ–π
        await query.delete_message()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∏—Ç–µ–ª–µ
        message_text = f"üë®‚Äçüè´ <b>{teacher['name']}</b>\n\n"

        if teacher.get('specialty'):
            message_text += f"üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {teacher['specialty']}\n\n"

        if teacher.get('photo'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—á–∏—Ç–µ–ª–µ–π", callback_data="back_to_teachers")],
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=teacher['photo'],
                caption=message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—á–∏—Ç–µ–ª–µ–π", callback_data="back_to_teachers")],
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )

    async def partner_detail(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
        query = update.callback_query
        await query.answer()

        partner_idx = int(query.data.replace('partner_', ''))

        if partner_idx < 0 or partner_idx >= len(self.partners_cache):
            await query.edit_message_text(text='–û—à–∏–±–∫–∞: –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        partner = self.partners_cache[partner_idx]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        await query.delete_message()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        message_text = f"ü§ù <b>{partner['name']}</b>\n\n"

        if partner.get('website'):
            message_text += f"üåê <b>–°–∞–π—Ç:</b> {partner['website']}\n\n"

        if partner.get('logo'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", callback_data="back_to_partners")],
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=partner['logo'],
                caption=message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–æ—Ç–∏–ø–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", callback_data="back_to_partners")],
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )

    async def show_photo_with_navigation(self, query, context: ContextTypes.DEFAULT_TYPE, model_info, photo_idx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        from telegram import InputMediaPhoto

        photos = model_info['photos']

        if not photos:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            message_text = self.format_model_text(model_info)
            await query.edit_message_text(text=message_text, parse_mode='HTML')
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = self.format_model_text(model_info)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π"
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π", callback_data="back_to_models")])

        if len(photos) > 1:
            row = []
            if photo_idx > 0:
                row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"photo_prev_{photo_idx}"))
            row.append(InlineKeyboardButton(f"{photo_idx + 1}/{len(photos)}", callback_data="photo_counter"))
            if photo_idx < len(photos) - 1:
                row.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"photo_next_{photo_idx}"))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        if not context.user_data.get('message_id'):
            message = await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photos[photo_idx],
                caption=message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            context.user_data['message_id'] = message.message_id
        else:
            # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
            media = InputMediaPhoto(media=photos[photo_idx], caption=message_text, parse_mode='HTML')
            await context.bot.edit_message_media(
                chat_id=query.message.chat_id,
                message_id=context.user_data['message_id'],
                media=media,
                reply_markup=reply_markup
            )

    async def photo_navigation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ"""
        query = update.callback_query
        await query.answer()

        model_info = context.user_data.get('current_model')
        if not model_info:
            await query.edit_message_text(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∑–∞–Ω–æ–≤–æ.')
            return

        current_idx = context.user_data.get('current_photo_idx', 0)
        photos = model_info['photos']

        if query.data.startswith('photo_prev_'):
            new_idx = max(0, current_idx - 1)
        elif query.data.startswith('photo_next_'):
            new_idx = min(len(photos) - 1, current_idx + 1)
        else:
            return  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

        context.user_data['current_photo_idx'] = new_idx

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        await self.show_photo_with_navigation(query, context, model_info, new_idx)

    async def back_to_models(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        query = update.callback_query
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é
        await query.delete_message()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä–∞
        current_page = context.user_data.get('current_page', 0)
        current_filter = context.user_data.get('current_filter', 'all')

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context.user_data.pop('current_model', None)
        context.user_data.pop('current_photo_idx', None)
        context.user_data.pop('message_id', None)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await self.list_models(update, context, page=current_page, filter_type=current_filter)

    async def back_to_teachers(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—á–∏—Ç–µ–ª–µ–π"""
        query = update.callback_query
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —É—á–∏—Ç–µ–ª—è
        await query.delete_message()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not self.teachers_cache:
            teachers = self.teachers_parser.parse_list()
            self.teachers_cache = teachers
        else:
            teachers = self.teachers_cache

        if not teachers:
            keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üë®‚Äçüè´ <b>–†–∞–∑–¥–µ–ª —É—á–∏—Ç–µ–ª–µ–π</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∏—Ç–µ–ª–µ–π
        message = "üë®‚Äçüè´ <b>–ù–∞—à–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</b>\n\n"
        message += f"–ù–∞–π–¥–µ–Ω–æ {len(teachers)} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []

        for idx, teacher in enumerate(teachers):
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å—é
            button_text = f"üë®‚Äçüè´ {teacher['name']}"
            if teacher.get('specialty'):
                button_text += f" ({teacher['specialty']})"

            keyboard.append([InlineKeyboardButton(
                button_text,
                callback_data=f"teacher_{idx}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    async def back_to_partners(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await query.delete_message()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not self.partners_cache:
            partners = self.partners_parser.parse_list()
            self.partners_cache = partners
        else:
            partners = self.partners_cache

        if not partners:
            keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="ü§ù <b>–†–∞–∑–¥–µ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        message = "ü§ù <b>–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã</b>\n\n"
        message += f"–ù–∞–π–¥–µ–Ω–æ {len(partners)} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []

        for idx, partner in enumerate(partners):
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            button_text = f"ü§ù {partner['name']}"

            keyboard.append([InlineKeyboardButton(
                button_text,
                callback_data=f"partner_{idx}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    async def back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–∞–∑–¥–µ–ª –º–æ–¥–µ–ª–µ–π/—É—á–∏—Ç–µ–ª–µ–π/–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
        await query.delete_message()

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        command_message_id = context.user_data.get('command_message_id')
        chat_id = context.user_data.get('chat_id') or query.message.chat_id

        logger.info(f"back_to_main: command_message_id={command_message_id}, chat_id={chat_id}")

        if command_message_id:
            try:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=command_message_id
                )
                logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–∞: message_id={command_message_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('current_model', None)
        context.user_data.pop('current_photo_idx', None)
        context.user_data.pop('message_id', None)
        context.user_data.pop('current_page', None)
        context.user_data.pop('current_filter', None)
        context.user_data.pop('command_message_id', None)
        context.user_data.pop('chat_id', None)
        context.user_data.pop('projects_list_message_id', None)

    async def handle_pagination(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º callback_data: page_{page_num}_filter_{filter_type}
        data = query.data

        if data.startswith('page_') and '_filter_' in data:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é "_filter_"
            filter_pos = data.find('_filter_')
            page_str = data[5:filter_pos]  # –ë–µ—Ä–µ–º —á–∞—Å—Ç—å –º–µ–∂–¥—É "page_" –∏ "_filter_"
            filter_type = data[filter_pos + 8:]  # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "_filter_"

            try:
                page = int(page_str)

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.delete_message()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                await self.list_models(update, context, page=page, filter_type=filter_type)
            except ValueError:
                await query.edit_message_text(text='–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.')
        else:
            await query.edit_message_text(text='–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.')

    async def handle_filter(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º callback_data: filter_{filter_type}_page_{page}
        data = query.data

        if data.startswith('filter_') and '_page_' in data:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é "_page_"
            page_pos = data.find('_page_')
            filter_type = data[7:page_pos]  # –£–±–∏—Ä–∞–µ–º "filter_" –≤ –Ω–∞—á–∞–ª–µ
            page_str = data[page_pos + 6:]  # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "_page_"

            try:
                page = int(page_str)

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.delete_message()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                await self.list_models(update, context, page=page, filter_type=filter_type)
            except ValueError:
                await query.edit_message_text(text='–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.')
        else:
            await query.edit_message_text(text='–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.')

    def format_model_text(self, model_info):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
        message_text = f"<b>{model_info['name']}</b>\n\n"

        if model_info['parameters']:
            hobbies_text = None
            for key, value in model_info['parameters'].items():
                if key == '–£–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ö–æ–±–±–∏':
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
                    hobbies_text = value
                else:
                    message_text += f"‚Ä¢ {key}: {value}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ö–æ–±–±–∏ –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if hobbies_text:
                message_text += f"\n{hobbies_text}\n"

        message_text += f'\n<a href="{model_info["url"]}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</a>'
        return message_text

    async def magazines_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /magazines"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
        if hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
            context.user_data['command_message_id'] = update.message.message_id
        elif hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        else:
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∂—É—Ä–Ω–∞–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not self.magazines_cache:
            magazines = self.magazines_parser.parse_list()
            self.magazines_cache = magazines
        else:
            magazines = self.magazines_cache

        if not magazines:
            keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=chat_id,
                text="üìñ <b>–ê—Ä—Ö–∏–≤ –∂—É—Ä–Ω–∞–ª–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø—É—Å–∫–æ–≤ –∂—É—Ä–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∂—É—Ä–Ω–∞–ª–æ–≤
        message = "üìñ <b>–ì–ª—è–Ω—Ü–µ–≤—ã–π –∂—É—Ä–Ω–∞–ª ARMODELS</b>\n\n"
        message += f"–ù–∞–π–¥–µ–Ω–æ {len(magazines)} –≤—ã–ø—É—Å–∫–æ–≤:\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []

        for idx, magazine in enumerate(magazines):
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ —Å –Ω–æ–º–µ—Ä–æ–º –≤—ã–ø—É—Å–∫–∞
            button_text = f"üìñ {magazine['issue_number']}"

            keyboard.append([InlineKeyboardButton(
                button_text,
                callback_data=f"magazine_{idx}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    async def magazine_detail(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–ø—É—Å–∫–∞ –∂—É—Ä–Ω–∞–ª–∞"""
        query = update.callback_query
        await query.answer()

        magazine_idx = int(query.data.replace('magazine_', ''))

        if magazine_idx < 0 or magazine_idx >= len(self.magazines_cache):
            await query.edit_message_text(text='–û—à–∏–±–∫–∞: –≤—ã–ø—É—Å–∫ –∂—É—Ä–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        magazine = self.magazines_cache[magazine_idx]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∂—É—Ä–Ω–∞–ª–æ–≤
        await query.delete_message()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø—É—Å–∫–µ –∂—É—Ä–Ω–∞–ª–∞
        message_text = f"üìñ <b>{magazine['issue_number']}</b>\n\n"

        if magazine.get('release_date') and magazine['release_date'] != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
            message_text += f"üìÖ <b>–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:</b> –≤ {magazine['release_date']}\n\n"

        message_text += "–í–æ–ø–ª–æ—â–µ–Ω–∏–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç–∏, —Å—Ç–∏–ª—è –∏ –∫—Ä–∞—Å–æ—Ç—ã –≤ –∫–∞–∂–¥–æ–º –≤—ã–ø—É—Å–∫–µ!\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
        if magazine.get('pdf_url'):
            keyboard.append([InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF", url=magazine['pdf_url'])])

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∂—É—Ä–Ω–∞–ª–æ–≤", callback_data="back_to_magazines")])
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        if magazine.get('cover_image'):
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=magazine['cover_image'],
                caption=message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )

    async def back_to_magazines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∂—É—Ä–Ω–∞–ª–æ–≤"""
        query = update.callback_query
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∂—É—Ä–Ω–∞–ª–∞
        await query.delete_message()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∂—É—Ä–Ω–∞–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not self.magazines_cache:
            magazines = self.magazines_parser.parse_list()
            self.magazines_cache = magazines
        else:
            magazines = self.magazines_cache

        if not magazines:
            keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üìñ <b>–ê—Ä—Ö–∏–≤ –∂—É—Ä–Ω–∞–ª–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø—É—Å–∫–æ–≤ –∂—É—Ä–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∂—É—Ä–Ω–∞–ª–æ–≤
        message = "üìñ <b>–ì–ª—è–Ω—Ü–µ–≤—ã–π –∂—É—Ä–Ω–∞–ª ARMODELS</b>\n\n"
        message += f"–ù–∞–π–¥–µ–Ω–æ {len(magazines)} –≤—ã–ø—É—Å–∫–æ–≤:\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []

        for idx, magazine in enumerate(magazines):
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ —Å –Ω–æ–º–µ—Ä–æ–º –≤—ã–ø—É—Å–∫–∞
            button_text = f"üìñ {magazine['issue_number']}"

            keyboard.append([InlineKeyboardButton(
                button_text,
                callback_data=f"magazine_{idx}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
        keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    async def projects_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /projects"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = self.projects_parser.get_categories()

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            keyboard = []

            # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
            keyboard.append([InlineKeyboardButton("üé≠ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="category_all")])

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for category_code, category_name in categories.items():
                emoji = self._get_category_emoji(category_code)
                keyboard.append([InlineKeyboardButton(f"{emoji} {category_name}", callback_data=f"category_{category_code}")])

            # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            message_text = "üé≠ <b>–ü—Ä–æ–µ–∫—Ç—ã ARMODELS</b>\n\n"
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã:"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if hasattr(update, 'message') and update.message:
                chat_id = update.message.chat_id
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–º–∞–Ω–¥—ã –∏ chat_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                context.user_data['command_message_id'] = update.message.message_id
                context.user_data['chat_id'] = chat_id
                logger.info(f"projects_command: –°–æ—Ö—Ä–∞–Ω–µ–Ω command_message_id={update.message.message_id}")
                await update.message.reply_text(
                    message_text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            elif hasattr(update, 'callback_query') and update.callback_query:
                chat_id = update.callback_query.message.chat_id
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (command_message_id —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
                context.user_data['chat_id'] = chat_id
                existing_command_id = context.user_data.get('command_message_id')
                logger.info(f"projects_command (callback): chat_id={chat_id}, existing command_message_id={existing_command_id}")
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            else:
                return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /projects: {e}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            if hasattr(update, 'message') and update.message:
                chat_id = update.message.chat_id
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            elif hasattr(update, 'callback_query') and update.callback_query:
                chat_id = update.callback_query.message.chat_id
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

    def _get_category_emoji(self, category_code: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        emoji_map = {
            'photo-projects': 'üì∏',
            'konkursi-krasoti': 'üëë',
            'fashion-shows': 'üëó',
            'advertising-shoots': 'üìπ',
            'interview': 'üé§'
        }

        # –ï—Å–ª–∏ category_code –ø—É—Å—Ç–æ–π –∏–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not category_code:
            return 'üé≠'

        return emoji_map.get(category_code, 'üé≠')

    async def project_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        context.user_data['chat_id'] = query.message.chat_id

        category_code = query.data.replace('category_', '')

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            category = None if category_code == 'all' else category_code

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
            if category not in self.projects_cache:
                projects = self.projects_parser.parse_list(category)
                self.projects_cache[category] = projects
            else:
                projects = self.projects_cache[category]

            if not projects:
                await query.delete_message()
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_projects"),
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                    ]])
                )
                return

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤
            category_name = "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã" if category_code == 'all' else self.projects_parser.get_categories().get(category_code, category_code)

            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_emoji = self._get_category_emoji(category_code)

            message_text = f"{category_emoji} <b>{category_name}</b>\n\n"
            message_text += f"–ù–∞–π–¥–µ–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []

            for idx, project in enumerate(projects):
                # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                title = project['title']
                if len(title) > 30:
                    title = title[:27] + "..."

                # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
                if category_code == 'all':
                    # –î–ª—è –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
                    project_category = project.get('category')
                    if not project_category:
                        logger.warning(f"–ü—Ä–æ–µ–∫—Ç '{title}' –Ω–µ –∏–º–µ–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                        project_category = ''
                    project_emoji = self._get_category_emoji(project_category)
                else:
                    # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    project_emoji = self._get_category_emoji(category_code)

                keyboard.append([InlineKeyboardButton(
                    f"{project_emoji} {title}",
                    callback_data=f"project_{category_code}_{idx}"
                )])

            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard.append([
                InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_projects"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await query.delete_message()
            message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            context.user_data['projects_list_message_id'] = message.message_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ {category_code}: {e}")
            await query.delete_message()
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_projects"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )

    async def project_detail(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
        query = update.callback_query
        await query.answer()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        context.user_data['chat_id'] = query.message.chat_id

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        projects_list_message_id = context.user_data.get('projects_list_message_id')
        if projects_list_message_id:
            try:
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=projects_list_message_id
                )
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            finally:
                context.user_data.pop('projects_list_message_id', None)

        # –ü–∞—Ä—Å–∏–º callback_data: project_{category}_{index}
        parts = query.data.split('_')
        if len(parts) < 3:
            await query.delete_message()
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞."
            )
            return

        category_code = parts[1]
        project_idx = int(parts[2])

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            category = None if category_code == 'all' else category_code

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –∫—ç—à–∞
            if category not in self.projects_cache:
                projects = self.projects_parser.parse_list(category)
                self.projects_cache[category] = projects
            else:
                projects = self.projects_cache[category]

            if project_idx < 0 or project_idx >= len(projects):
                await query.delete_message()
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return

            project = projects[project_idx]

            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            project_category = project.get('category', '')
            category_emoji = self._get_category_emoji(project_category)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
            message_text = f"{category_emoji} <b>{project['title']}</b>\n\n"
            message_text += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {project['category_name']}\n\n"

            if project['description']:
                message_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{project['description']}\n\n"

            if project['detail_url']:
                message_text += f"üîó <a href=\"{project['detail_url']}\">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>"

            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            category_callback = "category_all" if category_code == 'all' else f"category_{category_code}"
            keyboard = [
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data=category_callback)],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            if project.get('image_url'):
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=project['image_url'],
                    caption=message_text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            else:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=message_text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ {project_idx}: {e}")
            category_callback = "category_all" if category_code == 'all' else f"category_{category_code}"
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=category_callback),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )

    async def back_to_projects(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.delete_message()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        context.user_data['chat_id'] = query.message.chat_id

        existing_command_id = context.user_data.get('command_message_id')
        logger.info(f"back_to_projects: existing command_message_id={existing_command_id}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        await self.projects_command(update, context)

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.application.run_polling()

if __name__ == '__main__':
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN
    import os
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        print("üîó –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        exit(1)

    print("ü§ñ –ó–∞–ø—É—Å–∫ ARModels Telegram Bot...")
    bot = ModelsTelegramBot(BOT_TOKEN)
    bot.run()